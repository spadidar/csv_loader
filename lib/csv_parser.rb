module CsvUtils
  class CsvParser

    def initialize *args
      options = args.extract_options!
      @file_path = options[:file_path]
      @separator = options[:separator]
      @delimiter = options[:delimiter]
      @file_name = options[:file_name]
      @table_name = options[:table_name]
      @faster_csv_options = get_faseter_csv_options
      @mode = options[:mode]
    end

    def iterate
      @faster_csv_options = get_faseter_csv_options
      FasterCSV.foreach(@file_path, @faster_csv_options) do |row|
        yield reformat_hash_keys(row.to_hash)
      end   
    end
    
    def get_sample_rows
      counter = 0
      sampleRows = Array.new
      @faster_csv_options = get_faseter_csv_options
      FasterCSV.foreach(@file_path, @faster_csv_options) do |row|
        if(counter < 20) 
          sampleRows << reformat_hash_keys(row.to_hash)
        else
          break
        end
        counter += 1
      end
      return sampleRows
    end

    def get_first_line
      FasterCSV.foreach(@file_path, @faster_csv_options) do |row|
        return row
      end
    end

    def generate_table *args
      options = args.extract_options!
      headers = options[:headers]
      @faster_csv_options = get_faseter_csv_options
      table = CsvUtils::AutoGeneratedTable.new("columns" => headers, 
                                               "table_name" => @table_name, 
                                               "persistant" => options[:persistant])
      counter = 0
      FasterCSV.foreach(@file_path, @faster_csv_options) do |row|
        row = reformat_hash_keys(row.to_hash)
        row.each do |field, data|
          table.set_type(CsvUtils::CsvParser.format_name(field), get_type(data))
        end
        counter += 1
        if(@mode == "live" && counter > 100)
          break
        end
      end

      return table
    end

    def concurrent_create_table headers
      @faster_csv_options = get_faseter_csv_options
      block = lambda{|file| 
        table = CsvUtils::AutoGeneratedTable.new("columns" => headers, "table_name" => @table_name)
        puts file 
        FasterCSV.foreach(file, @faster_csv_options) do |row|
          row = reformat_hash_keys(row.to_hash)
          row.each do |field, data|
            table.set_type(CsvUtils::CsvParser.format_name(field), get_type(data))
          end
        end
        table
      }
      textmax = Muxer::Processor.new(:code_block => block, :temp_dir => "tmp/saz", :file_path => @file_path)
      tables = textmax.start
      all_types = Hash.new
      puts tables.length.to_s
      headers.each do |header|
        types = Hash.new
        tables.each do |table|
          table.field_types.each do |column, type_hash|
            type_hash.each_pair do |type, occurence|
              types[type] = occurence
            end
          end
        end
        all_types[header] = types
      end
      table = CsvUtils::AutoGeneratedTable.new("columns" => headers, "table_name" => @table_name)
      table.field_types = all_types
      Kernel.p table.get_types_for_display
    end

    def reformat_hash_keys hash
      hash.each do |key, value|
        hash.delete(key)
        hash[CsvUtils::CsvParser.format_name(key)] = value
      end
      return hash
    end

    def get_type value
      return TypeChecker.type?(value)
    end

    def get_headers
      hash = @faster_csv_options
      hash[:return_headers] = true
      hash[:headers] = false
      FasterCSV.foreach(@file_path, @faster_csv_options) do |row|
        formatted_row = Array.new
        row.each do |header|
          formatted_row << CsvUtils::CsvParser.format_name(header)
        end
        return formatted_row
      end
    end
    
    def self.format_name name
      if(!name.nil?)
        name = name.strip
        name = name.gsub(" ", "_")
      else
        name = ""
      end
      return name
    end

    def get_faseter_csv_options
      hash = Hash.new
      hash[:return_headers] = false 
      hash[:headers] = true

      if(@delimiter == "double_quote")
        hash[:quote_char] = '"'
      elsif(@delimiter == "single_quote")
        hash[:quote_char] = "'"
      end
      
      if(@separator == "comma")
        hash[:col_sep] = ","
      elsif(@separator == "pipe")
        hash[:col_sep] = "|"
      elsif(@separator == "tab")
        hash[:col_sep] = "\t"
      elsif(@separator == "space")
        hash[:col_sep] = " "
      end
      return hash
    end
  end
end
